USE PARKINGMAP
GO

CREATE TRIGGER TG_CREATE_PARKING_LOT_RATING
ON PARKING_LOT_RATING
AFTER INSERT
AS
BEGIN 
	DECLARE 
		@PARKING_LOT_ID BIGINT,
		@RATING TINYINT

	SET @PARKING_LOT_ID = (SELECT PARKING_LOT_ID FROM INSERTED)
	SET @RATING = (SELECT RATING FROM INSERTED)

	UPDATE PARKING_LOT_INFORMATION
	SET 
		RATING_AVERAGE = ((RATING_AVERAGE * NUMBER_OF_RATING) + @RATING) / (NUMBER_OF_RATING + 1),
		NUMBER_OF_RATING = NUMBER_OF_RATING + 1
	WHERE PARKING_LOT_ID = @PARKING_LOT_ID
END
GO

CREATE TRIGGER TG_DELETE_PARKING_LOT_RATING
ON PARKING_LOT_RATING
FOR DELETE
AS
BEGIN
	DECLARE 
		@PARKING_LOT_ID BIGINT,
		@RATING TINYINT

	SET @PARKING_LOT_ID = (SELECT PARKING_LOT_ID FROM DELETED)
	SET @RATING = (SELECT RATING FROM DELETED)

	UPDATE PARKING_LOT_INFORMATION
	SET 
		RATING_AVERAGE = ((RATING_AVERAGE * NUMBER_OF_RATING) - @RATING) / (NUMBER_OF_RATING - 1),
		NUMBER_OF_RATING = NUMBER_OF_RATING - 1
	WHERE PARKING_LOT_ID = @PARKING_LOT_ID
END
GO

CREATE TRIGGER TG_UPDATE_PARKING_LOT_RATING
ON PARKING_LOT_RATING
FOR UPDATE
AS
BEGIN
	DECLARE 
		@PARKING_LOT_ID BIGINT,
		@RATING_ID BIGINT,
		@OLD_RATING TINYINT,
		@NEW_RATING TINYINT

	SET @PARKING_LOT_ID = (SELECT PARKING_LOT_ID FROM INSERTED)
	SET @RATING_ID = (SELECT ID FROM INSERTED)
	SET @OLD_RATING = (SELECT RATING FROM DELETED)
	SET	@NEW_RATING = (SELECT RATING FROM INSERTED)

	IF @OLD_RATING = @NEW_RATING RETURN

	UPDATE PARKING_LOT_INFORMATION
	SET RATING_AVERAGE = ((RATING_AVERAGE * NUMBER_OF_RATING) - @OLD_RATING + @NEW_RATING) / NUMBER_OF_RATING
	WHERE PARKING_LOT_ID = @PARKING_LOT_ID

	UPDATE PARKING_LOT_RATING
	SET LAST_UPDATED = GETDATE()
	WHERE ID = @RATING_ID
END
GO

CREATE TRIGGER TG_UPDATE_PARKING_LOT_UNIT
ON PARKING_LOT_UNIT
FOR UPDATE
AS
BEGIN
	UPDATE PARKING_LOT_UNIT
	SET LAST_UPDATED = GETDATE()
	WHERE ID = (SELECT ID FROM INSERTED)
END
GO

CREATE TRIGGER TG_UPDATE_PARKING_LOT
ON PARKING_LOT
FOR UPDATE
AS
BEGIN
	UPDATE PARKING_LOT
	SET LAST_UPDATED = GETDATE()
	WHERE ID = (SELECT ID FROM INSERTED)
END
GO

CREATE TRIGGER TG_UPDATE_PARKING_LOT_SUGGESTION
ON PARKING_LOT_SUGGESTION
FOR UPDATE
AS
BEGIN
	UPDATE PARKING_LOT_SUGGESTION
	SET LAST_UPDATED = GETDATE()
	WHERE ID = (SELECT ID FROM INSERTED)
END
GO

CREATE TRIGGER TG_UPDATE_REPORT
ON REPORT
FOR UPDATE
AS
BEGIN
	UPDATE REPORT
	SET LAST_UPDATED = GETDATE()
	WHERE ID = (SELECT ID FROM INSERTED)
END
GO

CREATE TRIGGER TG_UPDATE_CUSTOMER
ON CUSTOMER
FOR UPDATE
AS
BEGIN
	UPDATE CUSTOMER
	SET LAST_UPDATED = GETDATE()
	WHERE CUSTOMER_ID = (SELECT CUSTOMER_ID FROM INSERTED)
END
GO