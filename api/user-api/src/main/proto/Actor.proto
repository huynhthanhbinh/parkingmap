syntax = "proto3";

package com.bht.saigonparking.api.grpc.user;
//option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "SaigonParkingUser";

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

enum UserRole {
    ALL = 0;
    CUSTOMER = 1;
    PARKING_LOT_EMPLOYEE = 2;
    GOVERNMENT_EMPLOYEE = 3;
    ADMIN = 4;
}

message User {
    int64 id = 1;
    UserRole role = 2;
    string username = 3;
    string password = 4;
    string email = 5;
    bool isActivated = 6;
    string lastSignIn = 7;
    int64 version = 8;
}

message Customer {
    User userInfo = 1;
    string firstName = 2;
    string lastName = 3;
    string phone = 4;
    string lastUpdated = 5;
}

message UpdatePasswordRequest {
    string username = 1;
    string newPassword = 2;
}

message UpdateUserLastSignInRequest {
    int64 userId = 1;
    int64 timeInMillis = 2;
}

message CountAllUserRequest {
    string keyword = 1; /* ignore this field if you want to get all - default: "" */
    UserRole userRole = 2; /* ignore this field if you want to get all - default: ALL */
    bool inactivatedOnly = 3; /* ignore this field if you want to get all - default: false */
}

message GetAllUserRequest {
    int32 nRow = 1;
    int32 pageNumber = 2;
    string keyword = 3; /* ignore this field if you want to get all - default: "" */
    UserRole userRole = 4; /* ignore this field if you want to get all - default: ALL */
    bool inactivatedOnly = 5; /* ignore this field if you want to get all - default: false */
}

message GetAllUserResponse {
    repeated User user = 1;
}

message DeleteMultiUserByIdRequest {
    repeated int64 userId = 1;
}

message MapToUsernameMapRequest {
    repeated int64 userId = 1;
}

message MapToUsernameMapResponse {
    map<int64, string> username = 1;
}

message CountAllUserGroupByRoleResponse {
    map<int64, int64> roleCount = 1; /* is a map of <user_role_long_value, count_user_role> */
}

service UserService {

    /** PUBLIC - ADMIN ONLY
     * use-case: countAllUserGroupByRole - admin dashboard
     *  + request: Empty
     *  + response: a map of <user_role_long_value, count_user_role> */
    rpc countAllUserGroupByRole (google.protobuf.Empty) returns (CountAllUserGroupByRoleResponse);

    /** PUBLIC - ADMIN ONLY
     * use-case: get all users
     *  + request: CountAllUserRequest, you need to provide 3 params
     *      ++ keyword: keyword maybe in username or email - ignore this field if you want to get all not by keyword
     *      ++ userRole: role of user you want to find - ignore this field if you want to get all role
     *      ++ inactivatedOnly: whether you want to get only inactivated user - ignore this field if you want to get all
     *  + response: number of user currently in the DBs satisfy your conditions
     *
     * For front-end team:
     *  + show total number of user (nRow) in the UI
     *  + calculate number of page by the following formula:
     *      ==> nPage = ceil( nRow / nRowPerPage )
     * (with nRowPerPage is number of rows in 1 page, max: 20)
     *
     * Eg. 123 user, you want to show in each page 10 user
     * so that there will be 123 / 10 = 12.3 ==> ceil(12.3) = 13 pages */
    rpc countAllUser (CountAllUserRequest) returns (google.protobuf.Int64Value);

    /** PUBLIC - ADMIN ONLY
     * use-case: get all users
     *  + request: GetAllUserRequest: you need to provide 5 params:
     *      ++ nRow: number of rows you want to show per page (max: 20)
     *      ++ pageNumber: page you want to get
     *      ++ keyword: keyword maybe in username or email - ignore this field if you want to get all not by keyword
     *      ++ userRole: role of user you want to find - ignore this field if you want to get all role
     *      ++ inactivatedOnly: whether you want to get only inactivated user - ignore this field if you want to get all
     *  + response: GetAllUserResponse: it will be a user list (with nRow result max) satisfy your conditions
     *
     * Eg. You request for page 1 with 10 rows, getAll
     * ==> you will get User from ID 1 to ID 10 (if no one had been deleted) */
    rpc getAllUser (GetAllUserRequest) returns (GetAllUserResponse);

    /** PRIVATE
     * use-case: get user by user ID
     *  + request: user ID
     *  + response: user object if succeed, otherwise, throw exception */
    rpc getUserById (google.protobuf.Int64Value) returns (User);

    /** PUBLIC
     * use-case: get user account information (basic information only)
     *  + request: username
     *  + response: user object if succeed, otherwise, throw exception */
    rpc getUserByUsername (google.protobuf.StringValue) returns (User);

    /** PRIVATE
     * use-case: get customer account information
     *  + request: customer's ID
     *  + response: customer object if succeed, otherwise, throw exception */
    rpc getCustomerById (google.protobuf.Int64Value) returns (Customer);

    /** PUBLIC
     * use-case: get customer account information
     *  + request: customer's username
     *  + response: customer object if succeed, otherwise, throw exception */
    rpc getCustomerByUsername (google.protobuf.StringValue) returns (Customer);

    /** PRIVATE
     * use-case: map user id list from ratings/suggestions to <user id, username> map
     *  + request: userId list/set
     *  + response: <userId, username> map, if succeed, otherwise, throw exception */
    rpc mapToUsernameMap (MapToUsernameMapRequest) returns (MapToUsernameMapResponse);

    /** PRIVATE
     * use-case: create user, CUSTOMER type (will be called by AuthService)
     *  + request: Customer object
     *  + response: user ID if succeed, otherwise, throw exception */
    rpc createCustomer (Customer) returns (google.protobuf.Int64Value);

    /** PUBLIC
     * use-case: update user, CUSTOMER type (will be called by AuthService)
     *  + request: Customer object
     *  + response: empty value if succeed, otherwise, throw exception */
    rpc updateCustomer (Customer) returns (google.protobuf.Empty);

    /** PUBLIC
     * Update password: 2 use-cases
     *  1/ forgot password
     *  2/ change password
     *
     * return empty value, if succeed,
     * otherwise, throw exception */
    rpc updatePassword (UpdatePasswordRequest) returns (google.protobuf.Empty);

    /** PRIVATE
     * use-case: activate new account (will be called by AuthService + ADMIN)
     *  + request: user ID
     *  + response: empty value if succeed, otherwise, throw exception */
    rpc activateUser (google.protobuf.Int64Value) returns (google.protobuf.Empty);

    /** PRIVATE
     * use-case: deactivate user (will be called by AuthService + ADMIN)
     *  + request: user ID
     *  + response: empty value if succeed, otherwise, throw exception */
    rpc deactivateUser (google.protobuf.Int64Value) returns (google.protobuf.Empty);

    /** PRIVATE
     * use-case: delete user (will be called by ADMIN or INTERNAL service)
     *  + request: user ID
     *  + response: empty value if succeed, otherwise, throw exception */
    rpc deleteUserById (google.protobuf.Int64Value) returns (google.protobuf.Empty);

    /** PRIVATE
     * use-case: delete multi user (will be called by ADMIN or INTERNAL service)
     *  + request: user ID list
     *  + response: empty value if succeed, otherwise, throw exception */
    rpc deleteMultiUserById (DeleteMultiUserByIdRequest) returns (google.protobuf.Empty);
}