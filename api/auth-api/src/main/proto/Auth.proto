syntax = "proto3";

package com.bht.saigonparking.api.grpc.auth;
//option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "SaigonParkingAuth";

import "Actor.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

message ValidateRequest {
    string username = 1;
    string password = 2;
    user.UserRole role = 3;
}

message ValidateResponse {
    string accessToken = 1;
    string refreshToken = 2;
}

message RegisterRequest {
    string username = 1;
    string password = 2;
    string email = 3;
    string firstName = 4;
    string lastName = 5;
    string phone = 6;
}

message RefreshTokenResponse {
    string username = 1;
    string accessToken = 2;
    string refreshToken = 3;
}

service AuthService {

    /** PUBLIC - everyone can call
     * use-case: create new user or customer
     *  + request: username
     *  + response: bool value if succeed, otherwise, throw exception */
    rpc checkUsernameAlreadyExist (google.protobuf.StringValue) returns (google.protobuf.BoolValue);

    /** PUBLIC - everyone can call
     * use-case: create new user or customer
     *  + request: email
     *  + response: bool value if succeed, otherwise, throw exception */
    rpc checkEmailAlreadyExist (google.protobuf.StringValue) returns (google.protobuf.BoolValue);

    /** PUBLIC
     * use-case: user login (Validate all type of user)
     *  + request: validate request, includes username, password and role
     *  + response: validate response: access token + refresh token */
    rpc validateUser (ValidateRequest) returns (ValidateResponse);

    /** PUBLIC
     * use-case: register new customer (user type CUSTOMER only !!!)
     *  + request: register request
     *  + response: userEmail, if succeed --> notify user that an email has been sent to <userEmail>
     *
     * Note that: exception will be thrown whether username or email already exist !*/
    rpc registerUser (RegisterRequest) returns (google.protobuf.StringValue);

    /** PUBLIC
     * use-case: reset password by email
     *  + request: username
     *  + response: userEmail, if succeed --> notify user that an email has been sent to <userEmail>
     *
     * please notice link provided in mail will expired in 5 min
     * please notice mail can be in spam folder, carefully check */
    rpc sendResetPasswordEmail (google.protobuf.StringValue) returns (google.protobuf.StringValue);

    /** PUBLIC
     * use-case: activate new account by email
     *  + request: username
     *  + response: userEmail, if succeed --> notify user that an email has been sent to <userEmail>
     *
     * please notice link provided in mail will expired in 5 min
     * please notice mail can be in spam folder, carefully check */
    rpc sendActivateAccountEmail (google.protobuf.StringValue) returns (google.protobuf.StringValue);

    /** PUBLIC
     * use-case: reset password by email, refresh token
     *  + request: empty value (please provide token!)
     *  + response: new short term access token + new long term refresh token (if refresh token nearly expired)
     *
     * generate new token as soon as user click on the link provided by email:
     * request send to server NEED TO PROVIDE short-term access token via metadata, so that server can know
     * who is request for new token or whether the token provided is expired or not */
    rpc generateNewToken (google.protobuf.Empty) returns (RefreshTokenResponse);

    /** PUBLIC
     * use-case: activate new account by email
     *  + request: empty value (please provide token!)
     *  + response: new short term access token + new long term refresh token (if refresh token nearly expired)
     *
     * generate new token as soon as user click on the link provided by email:
     * request send to server NEED TO PROVIDE short-term access token via metadata, so that server can know
     * who is request for new token or whether the token provided is expired or not */
    rpc activateNewAccount (google.protobuf.Empty) returns (RefreshTokenResponse);
}