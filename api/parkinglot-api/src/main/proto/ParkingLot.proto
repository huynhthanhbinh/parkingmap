syntax = "proto3";

package com.bht.saigonparking.api.grpc.parkinglot;
option java_multiple_files = true;

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

enum ParkingLotType {
    ALL = 0;
    BUILDING = 1;
    PRIVATE = 2;
    STREET = 3;
}

message ParkingLotResult {
    int64 id = 1;
    string name = 2;
    ParkingLotType type = 3;
    double latitude = 4;
    double longitude = 5;
    int32 availableSlot = 6;
    int32 totalSlot = 7;
    double distance = 8;
}

message ParkingLotInformation {
    string name = 1;
    string address = 2;
    string phone = 3;
    bytes imageData = 6;
    int64 version = 7;
}

message ParkingLot {
    int64 id = 1;
    ParkingLotType type = 2;
    double latitude = 3;
    double longitude = 4;
    string openingHour = 5;
    string closingHour = 6;
    int32 availableSlot = 7;
    int32 totalSlot = 8;
    int64 version = 9;
    ParkingLotInformation information = 10;
}

message ParkingLotUnit {
    int64 id = 1;
    int64 parkingLotId = 2;
    int32 lowerBoundHour = 3;
    int32 upperBoundHour = 4;
    int32 unitPrice = 5;
    int64 version = 6;
}

message ParkingLotIdList {
    repeated int64 parkingLotId = 1;
}

message ScanningByRadiusRequest {
    double latitude = 1;
    double longitude = 2;
    int32 radiusToScan = 3;
    int32 nResult = 4;
}

message ParkingLotLimit {
    int32 availableSlot = 1;
    int32 totalSlot = 2;
}

message ParkingLotResultList {
    repeated ParkingLotResult parkingLotResult = 1;
}

message CountAllParkingLotRequest {
    string keyword = 1; /* optional, ignore this field if you want to get all - default: "" */
    ParkingLotType parkingLotType = 2; /* optional, ignore this field if you want to get all - default: ALL */
    bool availableOnly = 3; /* optional, ignore this field if you want to get all - default: false */
}

message GetAllParkingLotRequest {
    string keyword = 1; /* optional, ignore this field if you want to get all - default: "" */
    ParkingLotType parkingLotType = 2; /* optional, ignore this field if you want to get all - default: ALL */
    bool availableOnly = 3; /* optional, ignore this field if you want to get all - default: false */
    int32 nRow = 4; /* number of rows you want to get per page */
    int32 pageNumber = 5; /* page number you want to get */
}

message GetAllParkingLotResponse {
    repeated ParkingLot parkingLot = 1;
}

message ParkingLotEmployeeInfo {
    int64 parkingLotId = 1;
    repeated int64 employeeId = 2;
}

message DeleteParkingLotNotification {
    repeated ParkingLotEmployeeInfo info = 1;
}

message DeleteMultiParkingLotByIdRequest {
    repeated int64 parkingLotId = 1; /* parking-lot id list which you want to delete */
}

message UpdateParkingLotAvailabilityRequest {
    int64 parkingLotId = 1;
    int32 newAvailability = 2;
}

message MapToParkingLotNameMapRequest {
    repeated int64 parkingLotId = 1;
}

message MapToParkingLotNameMapResponse {
    map<int64, string> parkingLotName = 1;
}

message CountAllParkingLotGroupByTypeResponse {
    map<int64, int64> typeCount = 1; /* is a map of <parking_lot_type_long_value, count_parking_lot_type> */
}

message AddEmployeeOfParkingLotRequest {
    int64 employeeId = 1;
    int64 parkingLotId = 2;
}

message RemoveEmployeeOfParkingLotRequest {
    int64 employeeId = 1;
    int64 parkingLotId = 2;
    bool deleteEmployee = 3; /* if admin want to remove employee from parking-lot, also delete this employee */
}

message GetEmployeeManageParkingLotIdListResponse {
    repeated int64 employeeId = 1;
}

service ParkingLotService {

    /** PUBLIC - ADMIN ONLY
     * use-case: countAllParkingLotGroupByType - admin dashboard
     *  + request: Empty
     *  + response: a map of <parking_lot_type_long_value, count_parking_lot_type> */
    rpc countAllParkingLotGroupByType (google.protobuf.Empty) returns (CountAllParkingLotGroupByTypeResponse);

    /** PUBLIC - PARKING-LOT EMPLOYEE ONLY
     * use-case: get parking-lot id by request's authorization header (parse employee id from Json Web Token - JWT)
     *  + request: empty
     *  + response: parking-lot's ID */
    rpc getParkingLotIdByAuthorizationHeader (google.protobuf.Empty) returns (google.protobuf.Int64Value);

    /** PUBLIC - ADMIN ONLY
     * use-case: send message to parking-lot employee, known parking-lot id
     *  + request: parking-lot employee's ID
     *  + response: parking-lot's ID */
    rpc getParkingLotIdByParkingLotEmployeeId (google.protobuf.Int64Value) returns (google.protobuf.Int64Value);

    /** PUBLIC - ADMIN ONLY
     * use-case: get all parking-lots
     *  + request: CountAllParkingLotRequest, you need to provide 3 params
     *      ++ keyword: keyword maybe in name or address or phone - ignore this field if you want to get all not by keyword
     *      ++ parkingLotType: type of parking lot you want to find - ignore this field if you want to get all type
     *      ++ availableOnly: whether you want to get only available parking lot - ignore this field if you want to get all
     *  + response: number of parking-lot currently in the DBs
     *
     * For front-end team:
     *  + show total number of parking-lot (nRow) in the UI
     *  + calculate number of page by the following formula:
     *      ==> nPage = ceil( nRow / nRowPerPage )
     * (with nRowPerPage is number of rows in 1 page, max: 20)
     *
     * Eg. 123 parking-lot, you want to show in each page 10 parking-lot
     * so that there will be 123 / 10 = 12.3 ==> ceil(12.3) = 13 pages */
    rpc countAllParkingLot (CountAllParkingLotRequest) returns (google.protobuf.Int64Value);

    /** PUBLIC - ADMIN ONLY
     * use-case: get all parking-lots
     *  + request: GetAllParkingLotRequest: you need to provide 5 params:
     *      ++ keyword: keyword maybe in name or address or phone - ignore this field if you want to get all not by keyword
     *      ++ parkingLotType: type of parking lot you want to find - ignore this field if you want to get all type
     *      ++ availableOnly: whether you want to get only available parking lot - ignore this field if you want to get all
     *      ++ nRow: number of rows you want to show per page (max: 20)
     *      ++ pageNumber: page you want to get
     *  + response: GetAllParkingLotResponse: it will be a parking-lot list (with nRow result max)
     *
     * Eg. You request for page 1 with 10 rows, getAll
     * ==> you will get ParkingLot from ID 1 to ID 10 (if no one had been deleted) */
    rpc getAllParkingLot (GetAllParkingLotRequest) returns (GetAllParkingLotResponse);

    /** PUBLIC
     * use-case: check parking-lot status on the way driver going to
     * ensure parking-lot is available as soon as the driver reach the target */
    rpc checkLimit (google.protobuf.Int64Value) returns (ParkingLotLimit);

    /** PUBLIC
     * use-case: check parking-lot status on the way driver going to
     * ensure parking-lot is available as soon as the driver reach the target */
    rpc checkAvailability (google.protobuf.Int64Value) returns (google.protobuf.BoolValue);

    /** PUBLIC
     * use-case: remove parking-lot markers on the map as soon as they're full
     * frequently check with the server the status of these parking-lot showing on the map
     * after a specific amount of time, such as 1 min, and remove markers which parking-lot is full */
    rpc checkUnavailability (ParkingLotIdList) returns (ParkingLotIdList);

    /** PUBLIC
     * use-case: show information of a specific parking-lot */
    rpc getParkingLotById (google.protobuf.Int64Value) returns (ParkingLot);

    /** PUBLIC
     * use-case: Show a list of suggested parking-lot (need parking-lot name)
     * remember: JOIN TABLE is expensive, this method will JOIN TABLE !!!!
     * therefore: unless you need the name of the parking lot in the result, please use the WITHOUT name method */
    rpc getTopParkingLotInRegionOrderByDistanceWithName (ScanningByRadiusRequest) returns (ParkingLotResultList);

    /** PUBLIC
     * use-case: Show markers on the map (don't need parking-lot's name)
     * remember: JOIN TABLE is expensive, this method NOT JOIN TABLE !!!!
     * therefore: unless you need the name of the parking lot in the result, please use this method instead */
    rpc getTopParkingLotInRegionOrderByDistanceWithoutName (ScanningByRadiusRequest) returns (ParkingLotResultList);

    /** PRIVATE
     * use-case: Admin delete 1 parking-lot
     *  + request: parking-lot ID list
     *  + response: empty value if succeed, otherwise, throw exception
     * note that: delete parking-lot also delete correspondent parking-lot-employee */
    rpc deleteParkingLotById (google.protobuf.Int64Value) returns (google.protobuf.Empty);

    /** PRIVATE
     * use-case: Admin delete multi parking-lot
     *  + request: parking-lot ID list
     *  + response: empty value if succeed, otherwise, throw exception
     * note that: delete parking-lot also delete correspondent parking-lot-employee */
    rpc deleteMultiParkingLotById (DeleteMultiParkingLotByIdRequest) returns (google.protobuf.Empty);

    /** PUBLIC - for admin & parkingLot only
     * use-case: update current available slots of parking slot
     *  + request: UpdateParkingLotAvailabilityRequest, you need to provide 2 arguments:
     *      ++ parkingLotId: id of parking-lot to be updated
     *      ++ newAvailability: new available slots of parking-lot
     *  + response: Empty value if succeed, otherwise, throw exception */
    rpc updateParkingLotAvailability (UpdateParkingLotAvailabilityRequest) returns (google.protobuf.Empty);

    /** PRIVATE
     * use-case: map parking lot id list from bookings to <parking lot id, parking lot name> map
     *  + request: parking-lot id list/set
     *  + response: <parking-lot id, parking-lot name> map, if succeed, otherwise, throw exception */
    rpc mapToParkingLotNameMap (MapToParkingLotNameMapRequest) returns (MapToParkingLotNameMapResponse);

    /** PRIVATE
     * use-case: view booking details
     *  + request: parking-lot id
     *  + response: parking-lot name, if succeed, otherwise, throw exception */
    rpc getParkingLotNameByParkingLotId (google.protobuf.Int64Value) returns (google.protobuf.StringValue);

    /** PUBLIC - admin only
     * use-case: createNewParkingLot
     *  + request: ParkingLot (ignore id and version)
     *  + response: new parking-lot id, if succeed, otherwise, throw exception */
    rpc createNewParkingLot (ParkingLot) returns (google.protobuf.Int64Value);

    /** PUBLIC - admin only
     * use-case: addEmployeeOfParkingLot
     * note that: 1 parking lot can have more than 1 employee account
     *  + request: AddEmployeeOfParkingLotRequest
     *  + response: empty, if succeed, otherwise, throw exception */
    rpc addEmployeeOfParkingLot (AddEmployeeOfParkingLotRequest) returns (google.protobuf.Empty);

    /** PUBLIC - admin only
     * use-case: removeEmployeeOfParkingLot
     * note that: 1 parking lot can have more than 1 employee account
     *  + request: RemoveEmployeeOfParkingLotRequest
     *  + response: empty, if succeed, otherwise, throw exception */
    rpc removeEmployeeOfParkingLot (RemoveEmployeeOfParkingLotRequest) returns (google.protobuf.Empty);

    /** PUBLIC - admin only
     * use-case: add/remove EmployeeOfParkingLot
     *  + request: employee's id
     *  + response: bool value if succeed, otherwise, throw exception */
    rpc checkEmployeeAlreadyManageParkingLot (google.protobuf.Int64Value) returns (google.protobuf.BoolValue);

    /** PRIVATE - internal use only
     * use-case: add/remove EmployeeOfParkingLot
     *  + request: parking lot's id
     *  + response: employee id list if succeed, otherwise, throw exception */
    rpc getEmployeeManageParkingLotIdList (google.protobuf.Int64Value) returns (GetEmployeeManageParkingLotIdListResponse);

    /** PUBLIC - admin only
     * use-case: add/remove/view EmployeeOfParkingLot
     *  + request: employee's id
     *  + response: ParkingLot */
    rpc getParkingLotManagedByEmployee (google.protobuf.Int64Value) returns (ParkingLot);
}