syntax = "proto3";

package com.bht.saigonparking.api.grpc.parkinglot;
//option java_generic_services = true;
option java_multiple_files = true;

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

enum ParkingLotType {
    BUILDING = 0;
    PRIVATE = 1;
    STREET = 2;
}

message ParkingLotResult {
    int64 id = 1;
    string name = 2;
    ParkingLotType type = 3;
    double latitude = 4;
    double longitude = 5;
    int32 availableSlot = 6;
    int32 totalSlot = 7;
    double distance = 8;
}

message ParkingLotInformation {
    string name = 1;
    string address = 2;
    string phone = 3;
    double ratingAverage = 4;
    int32 numberOfRating = 5;
    bytes imageData = 6;
    int64 version = 7;
}

message ParkingLot {
    int64 id = 1;
    ParkingLotType type = 2;
    double latitude = 3;
    double longitude = 4;
    string openingHour = 5;
    string closingHour = 6;
    int32 availableSlot = 7;
    int32 totalSlot = 8;
    int64 version = 9;
    ParkingLotInformation information = 10;
}

message ParkingLotUnit {
    int64 id = 1;
    int64 parkingLotId = 2;
    int32 lowerBoundHour = 3;
    int32 upperBoundHour = 4;
    int32 unitPrice = 5;
    int64 version = 6;
}

message ParkingLotRating {
    int64 id = 1;
    int64 parkingLotId = 2;
    int64 customerId = 3;
    string customerFullName = 4;
    int32 rating = 5;
    string comment = 6;
    string lastUpdated = 7;
    int64 version = 8;
}

message ParkingLotSuggestion {
    int64 id = 1;
    int64 customerId = 2;
    string customerFullName = 3;
    string parkingLotName = 4;
    string address = 5;
    double latitude = 6;
    double longitude = 7;
    bool isHandled = 8;
    string lastUpdated = 9;
    int64 version = 10;
}

message ParkingLotIdList {
    repeated int64 parkingLotId = 1;
}

message ScanningByRadiusRequest {
    double latitude = 1;
    double longitude = 2;
    int32 radiusToScan = 3;
    int32 nResult = 4;
}

message ParkingLotLimit {
    int32 availableSlot = 1;
    int32 totalSlot = 2;
}

message ParkingLotResultList {
    repeated ParkingLotResult parkingLotResult = 1;
}

message GetAllParkingLotRequest {
    int32 nRow = 1;
    int32 pageNumber = 2;
}

message GetAllParkingLotResponse {
    repeated ParkingLot parkingLot = 1;
}

service ParkingLotService {

    /** PUBLIC - ADMIN ONLY
     * use-case: get all parking-lots
     *  + request: empty value
     *  + response: number of parking-lot currently in the DBs
     *
     * For front-end team:
     *  + show total number of parking-lot (nRow) in the UI
     *  + calculate number of page by the following formula:
     *      ==> nPage = ceil( nRow / nRowPerPage )
     * (with nRowPerPage is number of rows in 1 page, max: 20)
     *
     * Eg. 123 parking-lot, you want to show in each page 10 parking-lot
     * so that there will be 123 / 10 = 12.3 ==> ceil(12.3) = 13 pages */
    rpc countAll (google.protobuf.Empty) returns (google.protobuf.Int64Value);

    /** PUBLIC - ADMIN ONLY
     * use-case: get all parking-lots
     *  + request: GetAllParkingLotRequest: you need to provide 2 params:
     *      ++ nRow: number of rows you want to show per page (max: 20)
     *      ++ pageNumber: page you want to get
     *  + response: GetAllParkingLotResponse: it will be a parking-lot list (with nRow result max)
     *
     * Eg. You request for page 1 with 10 rows,
     * ==> you will get ParkingLot from ID 1 to ID 10 (if no one had been deleted) */
    rpc getAllParkingLot (GetAllParkingLotRequest) returns (GetAllParkingLotResponse);

    /** PUBLIC
     * use-case: check parking-lot status on the way driver going to
     * ensure parking-lot is available as soon as the driver reach the target */
    rpc checkLimit (google.protobuf.Int64Value) returns (ParkingLotLimit);

    /** PUBLIC
     * use-case: check parking-lot status on the way driver going to
     * ensure parking-lot is available as soon as the driver reach the target */
    rpc checkAvailability (google.protobuf.Int64Value) returns (google.protobuf.BoolValue);

    /** PUBLIC
     * use-case: remove parking-lot markers on the map as soon as they're full
     * frequently check with the server the status of these parking-lot showing on the map
     * after a specific amount of time, such as 1 min, and remove markers which parking-lot is full */
    rpc checkUnavailability (ParkingLotIdList) returns (ParkingLotIdList);

    /** PUBLIC
     * use-case: show information of a specific parking-lot */
    rpc getParkingLotById (google.protobuf.Int64Value) returns (ParkingLot);

    /** PUBLIC
     * use-case: Show a list of suggested parking-lot (need parking-lot name)
     * remember: JOIN TABLE is expensive, this method will JOIN TABLE !!!!
     * therefore: unless you need the name of the parking lot in the result, please use the WITHOUT name method */
    rpc getTopParkingLotInRegionOrderByDistanceWithName (ScanningByRadiusRequest) returns (ParkingLotResultList);

    /** PUBLIC
     * use-case: Show markers on the map (don't need parking-lot's name)
     * remember: JOIN TABLE is expensive, this method NOT JOIN TABLE !!!!
     * therefore: unless you need the name of the parking lot in the result, please use this method instead */
    rpc getTopParkingLotInRegionOrderByDistanceWithoutName (ScanningByRadiusRequest) returns (ParkingLotResultList);
}